/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myftpstorage;

import com.sun.security.ntlm.Client;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author HuyLV
 */
public final class ScreenClient extends javax.swing.JFrame {

    public ServerInterface server;
    public String clientRoot;
    public String currentClientDir;
    public String currentClientFile;
    public String currentServerDir;
    public String currentServerFile;
    public ArrayList<String> clientList;
    public ArrayList<String> serverList;
    public Transfer transfer;
    public FileSystemView fileSystemView;

    /**
     * Creates new form ScreenClient
     */
    public ScreenClient() throws IOException {
        this.fileSystemView = FileSystemView.getFileSystemView();
        this.currentClientDir = "";
        this.currentClientFile = "";
        this.currentServerDir = "";
        this.currentServerFile = "";
        initComponents();
        this.clientRoot = path_Client.getText();
        updateClientDir();
        this.resume.setEnabled(false);
        this.pause.setEnabled(false);
        this.stop.setEnabled(false);
        updateServerDir();
    }

    ScreenClient(String fileClientPath, ServerInterface server) throws IOException {
        this.fileSystemView = FileSystemView.getFileSystemView();
        this.currentClientDir = "";
        this.currentClientFile = "";
        this.currentServerDir = "";
        this.currentServerFile = "";
        this.server = server;
        initComponents();
        path_Client.setText(fileClientPath);
        this.clientRoot = fileClientPath;
        updateClientDir();
        updateServerDir();
        this.resume.setEnabled(false);
        this.pause.setEnabled(false);
        this.stop.setEnabled(false);
        this.transfer = new Transfer(this.server, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        path_Client = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        connect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClient = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableServer = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        delete_client = new javax.swing.JButton();
        rename = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        download = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        resume = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        process = new javax.swing.JLabel();
        stop = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Folder Client:");

        path_Client.setEditable(false);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Choose folder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        refresh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        connect.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        connect.setText("DisConnect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        tableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Size", "Type", "Last Modified"
            }
        ));
        tableClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableClient);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("CLIENT");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tableServer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Size", "Type", "Last Modified"
            }
        ));
        tableServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableServerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableServer);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("SERVER");

        delete_client.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        delete_client.setText("Delete");
        delete_client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_clientActionPerformed(evt);
            }
        });

        rename.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rename.setText("Rename");
        rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameActionPerformed(evt);
            }
        });

        upload.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        upload.setText("Upload");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        download.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        resume.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        resume.setText("Resume");
        resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeActionPerformed(evt);
            }
        });

        pause.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pause.setText("Pause");
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        process.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        stop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Processing:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(path_Client, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rename, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delete_client, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(download)
                .addGap(48, 48, 48)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(255, 255, 255))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(resume, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(process, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(path_Client, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upload)
                    .addComponent(rename)
                    .addComponent(delete_client)
                    .addComponent(download, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete))
                .addGap(14, 14, 14)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pause)
                            .addComponent(resume)
                            .addComponent(stop))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(process))
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        chooseClientFolder();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        updateClientDir();
        try {
            if (server != null) {
                updateServerDir();
            }
        } catch (IOException ex) {
            Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        System.exit(10);
    }//GEN-LAST:event_connectActionPerformed

    private void delete_clientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_clientActionPerformed
        updateCurrentClientFile();
        if (currentClientFile.equals("..")) {
            return;
        }
        new File(clientRoot + "\\" + currentClientDir + "\\" + currentClientFile).delete();
        updateClientDir();
    }//GEN-LAST:event_delete_clientActionPerformed

    private void renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameActionPerformed
        updateCurrentClientFile();
        if (currentClientFile.equals("")) {
            return;
        }
        String input = JOptionPane.showInputDialog(this, "Enter new name", currentClientFile);
        File file = new File(clientRoot + "/" + currentClientDir + "/" + currentClientFile);
        File file2 = new File(clientRoot + "/" + currentClientDir + "/" + input);
        if (input == null || input.equals(currentClientFile)) {
            return;
        }
        if (file2.exists() == true) {
            JOptionPane.showMessageDialog(this, "Name already exist");
        } else {
            file.renameTo(file2);
            if (file2.exists() == true) {
                JOptionPane.showMessageDialog(this, "Rename completed");
            } else {
                JOptionPane.showMessageDialog(this, "Not sucessful");
            }
        }
        updateClientDir();
    }//GEN-LAST:event_renameActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        if (server == null) {
            return;
        }
        updateCurrentClientFile();
        if (currentClientFile.equals("") || (new File(clientRoot + "/" + currentClientDir + "/" + currentClientFile).isFile() == false)) {
            JOptionPane.showMessageDialog(this, "File not selected.");
            return;
        }
        // check exist file name
        boolean fExist = false;
        try {
            updateServerDir();
        } catch (IOException ex) {
            Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < serverList.size(); i++) {
            if (currentClientFile.equals(serverList.get(i))) {
                fExist = true;
                break;
            }
        }

        String dstName = currentClientFile;
        if (fExist) {
            int result = JOptionPane.showConfirmDialog(this, "The file \"" + currentClientFile + "\" already exists, Do you want to override it?",
                    "alert", JOptionPane.YES_NO_CANCEL_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                try {
                    // ghi đè
                    this.server.deleteFile(currentServerDir + currentClientFile);
                    this.resume.setEnabled(false);
                    this.pause.setEnabled(true);
                    this.stop.setEnabled(true);
                    upload.setEnabled(false);
                    download.setEnabled(false);
                    File dst = null;
                    try {
                        dst = server.getFile(dstName);
                    } catch (IOException ex) {
                        Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    File src = new File(clientRoot + "\\" + currentClientDir + "\\" + currentClientFile);
                    this.transfer.upload(src, dst);

                } catch (IOException ex) {
                    Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                return;
            }
        } else {
            this.resume.setEnabled(false);
            this.pause.setEnabled(true);
            this.stop.setEnabled(true);
            upload.setEnabled(false);
            download.setEnabled(false);
            File dst = null;
            try {
                dst = server.getFile(dstName);
            } catch (IOException ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            File src = new File(clientRoot + "\\" + currentClientDir + "\\" + currentClientFile);
            try {
                this.transfer.upload(src, dst);
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_uploadActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        if (server == null) {
            return;
        }
        updateCurrentServerFile();
        try {
            if (currentServerFile.equals("") || server.isFile(currentServerDir + "/" + currentServerFile) == false) {
                JOptionPane.showMessageDialog(this, "File not selected.");
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        // check exist file name
        boolean fileExist = false;
        updateClientDir();
        for (int i = 0; i < clientList.size(); i++) {
            if (currentServerFile.equals(clientList.get(i))) {
                fileExist = true;
                break;
            }
        }
        String dstName = currentServerFile;
        if (fileExist == true) {
            int result = JOptionPane.showConfirmDialog(this, "The file \"" + currentServerFile + "\" already exists, Do you want to override it?",
                    "alert", JOptionPane.YES_NO_CANCEL_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                try {
                    // ghi đè
                    new File(clientRoot + "\\" + currentClientDir + "\\" + currentServerFile).delete();
                    this.resume.setEnabled(false);
                    this.pause.setEnabled(true);
                    this.stop.setEnabled(true);
                    download.setEnabled(false);
                    upload.setEnabled(false);
                    File dst = new File(clientRoot + "\\" + currentClientDir + "\\" + dstName);
                    File src = null;
                    try {
                        src = this.server.getFile(currentServerFile);
                    } catch (IOException ex) {
                        Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println(currentServerFile);

                    this.transfer.download(src, dst);

                } catch (IOException ex) {
                    Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                return;
            }
        } else {
            this.resume.setEnabled(false);
            this.pause.setEnabled(true);
            this.stop.setEnabled(true);
            download.setEnabled(false);
            upload.setEnabled(false);
            File dst = new File(clientRoot + "\\" + currentClientDir + "\\" + dstName);
            File src = null;
            try {
                src = this.server.getFile(currentServerFile);
            } catch (IOException ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(currentServerFile);
            try {
                this.transfer.download(src, dst);
            } catch (IOException ex) {
            } catch (Exception ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_downloadActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {
            updateCurrentServerFile();
            this.server.deleteFile(currentServerDir + currentServerFile);
            updateServerDir();
        } catch (IOException ex) {
            Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void resumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeActionPerformed
        Transmission transmission = this.transfer.getTransmission();
        if (transmission.getStatus() == Transmission.PAUSE) {
            transmission.continueTransfer();
            this.transfer.processThread(transmission);
            resume.setEnabled(false);
            pause.setEnabled(true);
        }
    }//GEN-LAST:event_resumeActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        Transmission transmission = this.transfer.getTransmission();
        if (transmission.getStatus() == Transmission.TRANSFERRING) {
            transmission.pauseTransfer();
        }
        pause.setEnabled(false);
        resume.setEnabled(true);
    }//GEN-LAST:event_pauseActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed

    }//GEN-LAST:event_stopActionPerformed

    private void tableClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClientMouseClicked
        // TODO add your handling code here:
        int index = tableClient.getSelectedRow();
        String name = (String) tableClient.getModel().getValueAt(index, 0);

        currentClientFile = "";
        if (evt.getClickCount() >= 2) {
            if (new File(clientRoot + "/" + currentClientDir + "/" + name).isFile() == true) {
                return;
            }
            if (name.equals("..")) {
                if (currentClientDir.lastIndexOf("/") != -1) {
                    System.out.println(currentClientDir);
                    currentClientDir = currentClientDir.substring(0, currentClientDir.lastIndexOf("/"));
                    System.out.println(currentClientDir);
                } else {
                    currentClientDir = "";
                }
            } else {
                if (!"".equals(currentClientDir)) {
                    currentClientDir = currentClientDir.concat("/").concat(name);
                } else {
                    currentClientDir = currentClientDir.concat(name);
                }
            }
            updateClientDir();
            System.out.println(currentClientDir);
        }

    }//GEN-LAST:event_tableClientMouseClicked

    private void tableServerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableServerMouseClicked
        // TODO add your handling code here:
        if (server == null) {
            return;
        }
        int index = tableServer.getSelectedRow();
        String name = (String) tableServer.getModel().getValueAt(index, 0);

        if (evt.getClickCount() >= 2) {

            try {
                if (server.isFile(currentServerDir + "/" + name) == true) {
                    return;
                }
            } catch (IOException ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            if ("..".equals(name)) {

                if (currentServerDir.lastIndexOf("/") != -1) {
                    currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf("/"));

                } else {
                    currentServerDir = "";
                }

            } else {

                if (!"".equals(currentServerDir)) {
                    currentServerDir = currentServerDir.concat("/").concat(name);
                } else {
                    currentServerDir = currentServerDir.concat(name);
                }
            }
            try {
                updateServerDir();
            } catch (IOException ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(currentServerDir);
        }
    }//GEN-LAST:event_tableServerMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScreenClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScreenClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScreenClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScreenClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ScreenClient().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    public void updateCurrentClientFile() {
        int index = tableClient.getSelectedRow();
        if (index != -1) {
            currentClientFile = (String) tableClient.getModel().getValueAt(index, 0);
        } else {
            currentClientFile = "";
        }
    }

    public void updateCurrentServerFile() {
        if (server == null) {
            return;
        }
        int index = tableServer.getSelectedRow();
        System.out.println(index);
        if (index != -1) {
            currentServerFile = (String) tableServer.getModel().getValueAt(index, 0);
        } else {
            currentServerFile = "";
        }
    }

    public void updateClientList(java.awt.event.MouseEvent evt) {

        int index = tableClient.getSelectedRow();
        String name = (String) tableClient.getModel().getValueAt(index, 0);

        currentClientFile = "";
        if (evt.getClickCount() >= 2) {
            if (new File(clientRoot + "/" + currentClientDir + "/" + name).isFile() == true) {
                return;
            }
            if (name.equals("..")) {

                if (currentClientDir.lastIndexOf("/") != -1) {
                    System.out.println(currentClientDir);
                    currentClientDir = currentClientDir.substring(0, currentClientDir.lastIndexOf("/"));
                    System.out.println(currentClientDir);
                } else {
                    currentClientDir = "";
                }

            } else {

                if (!"".equals(currentClientDir)) {
                    currentClientDir = currentClientDir.concat("/").concat(name);
                } else {
                    currentClientDir = currentClientDir.concat(name);
                }

            }
            updateClientDir();
            System.out.println(currentClientDir);
        }

    }

    public void updateServerList(java.awt.event.MouseEvent evt) throws IOException {
        if (server == null) {
            return;
        }
        int index = tableServer.getSelectedRow();
        String name = (String) tableServer.getModel().getValueAt(index, 0);

        if (evt.getClickCount() >= 2) {

            if (server.isFile(currentServerDir + "/" + name) == true) {
                return;
            }
            if ("..".equals(name)) {

                if (currentServerDir.lastIndexOf("/") != -1) {
                    currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf("/"));

                } else {
                    currentServerDir = "";
                }

            } else {

                if (!"".equals(currentServerDir)) {
                    currentServerDir = currentServerDir.concat("/").concat(name);
                } else {
                    currentServerDir = currentServerDir.concat(name);
                }
            }
            updateServerDir();
            System.out.println(currentServerDir);
        }
    }

    public void renameClient() {
        updateCurrentClientFile();
        if (currentClientFile.equals("")) {
            return;
        }
        String input = JOptionPane.showInputDialog(this, "Enter new name", currentClientFile);
        File file = new File(clientRoot + "/" + currentClientDir + "/" + currentClientFile);
        File file2 = new File(clientRoot + "/" + currentClientDir + "/" + input);
        if (input == null || input.equals(currentClientFile)) {
            return;
        }
        if (file2.exists() == true) {
            JOptionPane.showMessageDialog(this, "Name already exist");
        } else {
            file.renameTo(file2);
            if (file2.exists() == true) {
                JOptionPane.showMessageDialog(this, "Rename completed");
            } else {
                JOptionPane.showMessageDialog(this, "Not sucessful");
            }
        }
        updateClientDir();
    }

    public void updateClientDir() {
        System.out.println(clientRoot);
        File ff = new File(clientRoot + "/" + currentClientDir);
        if (ff.isDirectory() == false) {
            currentClientDir = "";
            ff = new File(clientRoot + "/" + currentClientDir);
        }
        clientList = new ArrayList<>(Arrays.asList(ff.list()));
        if (!currentClientDir.equals("")) {
            clientList.add(0, "..");
        }
        AbstractTableModel tm;
        tm = new AbstractTableModel() {
            String[] ColumnName = {"Name", "Size", "Type", "Last Modified"};

            @Override
            public int getRowCount() {
                return clientList.size();
            }

            ;
            @Override
            public int getColumnCount() {
                return 4;
            }

            ;
            @Override
            public Object getValueAt(int row, int column) {
                int k = 0;
                if ("".equals(currentClientDir)) {
                    k = -1;
                }
                if (row == k) {
                    switch (column) {
                        case 0:
                            return clientList.get(row);
                        case 1:
                            return "";
                        case 2:
                            return fileSystemView.getSystemTypeDescription(new File(clientRoot + "/" + currentClientDir));
                        case 3:
                            return "";
                    }

                } else {
                    switch (column) {
                        case 0:
                            return clientList.get(row);
                        case 1: {
                            long length = new File(clientRoot + "/" + currentClientDir + "/" + clientList.get(row)).length();
                            if (length > 1024) {
                                length = length / 1024;
                            } else if (length == 0) {
                                length = 0;
                            } else {
                                length = 1;
                            }
                            return String.valueOf(length).concat(" KB");
                        }
                        case 2:
                            return fileSystemView.getSystemTypeDescription(new File(clientRoot + "/" + currentClientDir + "/" + clientList.get(row)));
                        case 3:
                            return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(new File(clientRoot + "/" + currentClientDir + "/" + clientList.get(row)).lastModified());
                    }
                }
                return null;
            }

            @Override
            public String getColumnName(int index) {
                return ColumnName[index];
            }
        };
        tableClient.setModel(tm);
        TableColumnModel tcm = tableClient.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setMinWidth(400);
        tc.setCellRenderer(new FileTableClientCellRenderer());
    }

    public void updateServerDir() throws IOException {
        if (server == null) {
            return;
        }
        serverList = server.getServerFileList(currentServerDir);

        if (currentServerDir.length() != 0) {
            serverList.add(0, "..");
        }
        AbstractTableModel tm = new AbstractTableModel() {
            String[] ColumnName = {"Name", "Size", "Type", "Last Modified"};

            @Override
            public int getRowCount() {
                return serverList.size();
            }

            @Override
            public int getColumnCount() {
                return 4;
            }

            @Override
            public Object getValueAt(int row, int column) {
                int k = 0;
                if ("".equals(currentServerDir)) {
                    k = -1;
                }
                if (row == k) {
                    switch (column) {
                        case 0:
                            return serverList.get(row);
                        case 1:
                            return "";
                        case 2: {
                            try {
                                return server.getFileType(currentServerDir);
                            } catch (IOException ex) {
                                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        case 3:
                            return "";
                    }

                } else {
                    switch (column) {
                        case 0:
                            return serverList.get(row);
                        case 1: {
                            long length;
                            try {
                                length = server.getFileSize(currentServerDir + "/" + serverList.get(row));
                                if (length > 1024) {
                                    length = length / 1024;
                                } else if (length == 0) {
                                    length = 0;
                                } else {
                                    length = 1;
                                }
                                return String.valueOf(length).concat(" KB");
                            } catch (IOException ex) {
                                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        case 2: {
                            try {
                                return server.getFileType(currentServerDir + "/" + serverList.get(row));
                            } catch (IOException ex) {
                                Logger.getLogger(ScreenClient.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        case 3: {
                            try {
                                return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(server.getFileLastModified(currentServerDir + "/" + serverList.get(row)));
                            } catch (IOException ex) {
                            }
                        }
                    }
                }
                return null;
            }

            @Override
            public String getColumnName(int index) {
                return ColumnName[index];
            }
        };
        tableServer.setModel(tm);
        TableColumnModel tcm = tableServer.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setMinWidth(400);
        tc.setCellRenderer(new FileTableServerCellRenderer());
    }

    public void updateProgress(String str) {

        process.setVisible(true);
        process.setText(str);

        //System.out.println(transferThread.progress + transferThread.size);    
    }

    public void chooseClientFolder() {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose Client Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            path_Client.setText(chooser.getSelectedFile().toString());
            clientRoot = path_Client.getText();
            currentClientDir = "";
            updateClientDir();
        }
    }

    public void openFileClient() {
        updateCurrentClientFile();
        File file = new File(clientRoot + "/" + currentClientDir + "/" + currentClientFile);
        Thread runs = new Thread() {
            @Override
            public void run() {
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.open(file);
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
        runs.start();

    }

    public void resetGUI() {
        resume.setEnabled(false);
        pause.setEnabled(false);
        stop.setEnabled(false);
        upload.setEnabled(true);
        download.setEnabled(true);
        process.setText("");
        updateClientDir();
        try {
            if (server != null) {
                updateServerDir();
            }
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public class FileTableClientCellRenderer implements TableCellRenderer {

        private FileSystemView fileSystemView;
        private JLabel label;
//        private Color textSelectionColor = Color.BLACK;
//        private Color backgroundSelectionColor = Color.CYAN;
//        private Color textNonSelectionColor = Color.BLACK;
//        private Color backgroundNonSelectionColor = Color.WHITE;

        public FileTableClientCellRenderer() {
            label = new JLabel();
            label.setOpaque(true);
            fileSystemView = FileSystemView.getFileSystemView();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

//            if (isSelected) {
//                label.setBackground(backgroundSelectionColor);
//                label.setForeground(textSelectionColor);
//            } else {
//                label.setBackground(backgroundNonSelectionColor);
//                label.setForeground(textNonSelectionColor);
//            }
            if (column == 0) {
                String name = (String) value;

                if (value.equals("..")) {
                    label.setIcon(fileSystemView.getSystemIcon(new File(clientRoot)));
                } else {
                    label.setIcon(fileSystemView.getSystemIcon(new File(clientRoot + "/" + currentClientDir + "/" + name)));
                }
                label.setText(name);
                label.setToolTipText((clientRoot + "/" + currentClientDir + "/" + name));
            }

            return label;
        }
    }

    public class FileTableServerCellRenderer implements TableCellRenderer {

        private FileSystemView fileSystemView;
        private JLabel label;
//        private Color textSelectionColor = Color.BLACK;
//        private Color backgroundSelectionColor = Color.CYAN;
//        private Color textNonSelectionColor = Color.BLACK;
//        private Color backgroundNonSelectionColor = Color.WHITE;

        public FileTableServerCellRenderer() {
            label = new JLabel();
            label.setOpaque(true);
            fileSystemView = FileSystemView.getFileSystemView();
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//            if (isSelected) {
//                label.setBackground(backgroundSelectionColor);
//                label.setForeground(textSelectionColor);
//            } else {
//                label.setBackground(
//                        backgroundNonSelectionColor);
//                label.setForeground(textNonSelectionColor);
//            }
            String name = (String) value;
            Icon icon;
            icon = null;
            if (column == 0) {
                try {
                    if (value.equals("..")) {
                        icon = server.getFileIcon("");
                        label.setIcon(server.getFileIcon(""));

                    } else {
                        icon = server.getFileIcon(currentServerDir + "/" + name);
                        label.setIcon(icon);

                    }
                    label.setText(name);
                    label.setToolTipText((currentServerDir + "/" + name));

                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            return label;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JButton delete;
    private javax.swing.JButton delete_client;
    private javax.swing.JButton download;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField path_Client;
    private javax.swing.JButton pause;
    private javax.swing.JLabel process;
    private javax.swing.JButton refresh;
    private javax.swing.JButton rename;
    private javax.swing.JButton resume;
    private javax.swing.JButton stop;
    private javax.swing.JTable tableClient;
    private javax.swing.JTable tableServer;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
}
